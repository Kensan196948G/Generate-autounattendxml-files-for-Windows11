# ============================================================================
# „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËá™ÂãïË®∫Êñ≠„Éª‰øÆÂæ©„Çπ„ÇØ„É™„Éó„Éà
# „Ç®„É©„Éº„ÇíËá™ÂãïÊ§úÁü•„Åó„Å¶‰øÆÂæ©ÂØæÂøú
# ============================================================================

param(
    [switch]$Force,          # Âº∑Âà∂‰øÆÂæ©„É¢„Éº„Éâ
    [switch]$Verbose,        # Ë©≥Á¥∞„É≠„Ç∞Ë°®Á§∫
    [int]$MaxRetries = 3     # ÊúÄÂ§ß„É™„Éà„É©„Ç§ÂõûÊï∞
)

$ScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$ErrorActionPreference = "Continue"

# ============================================================================
# „É≠„Ç∞Èñ¢Êï∞
# ============================================================================
function Write-Log {
    param(
        [string]$Message,
        [string]$Level = "INFO"
    )
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    
    switch ($Level) {
        "SUCCESS" { Write-Host "[$timestamp] ‚úÖ $Message" -ForegroundColor Green }
        "ERROR"   { Write-Host "[$timestamp] ‚ùå $Message" -ForegroundColor Red }
        "WARNING" { Write-Host "[$timestamp] ‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
        "INFO"    { Write-Host "[$timestamp] ‚ÑπÔ∏è  $Message" -ForegroundColor Cyan }
        "DEBUG"   { if ($Verbose) { Write-Host "[$timestamp] üîç $Message" -ForegroundColor Gray } }
        "FIX"     { Write-Host "[$timestamp] üîß $Message" -ForegroundColor Magenta }
    }
}

# ============================================================================
# „Ç®„É©„ÉºÊ§úÁü•„Éª‰øÆÂæ©„ÇØ„É©„Çπ
# ============================================================================
class BackendAutoFixer {
    [string]$BackendPath
    [hashtable]$Errors = @{}
    [int]$RetryCount = 0
    [int]$MaxRetries
    
    BackendAutoFixer([string]$path, [int]$maxRetries) {
        $this.BackendPath = $path
        $this.MaxRetries = $maxRetries
    }
    
    # PythonÁí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
    [bool] CheckPython() {
        Write-Log "PythonÁí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." "INFO"
        
        try {
            $pythonVersion = & python --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Log "PythonÊ§úÂá∫: $pythonVersion" "SUCCESS"
                return $true
            }
        } catch {
            $this.Errors["python"] = "Python„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        }
        
        return $false
    }
    
    # Python‰øÆÂæ©
    [bool] FixPython() {
        Write-Log "Python„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíÁ¢∫Ë™ç‰∏≠..." "FIX"
        
        # Python3.9‰ª•‰∏ä„ÇíÁ¢∫Ë™ç
        $pythonPaths = @(
            "$env:LOCALAPPDATA\Programs\Python\Python39\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python310\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python311\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python312\python.exe",
            "C:\Python39\python.exe",
            "C:\Python310\python.exe",
            "C:\Python311\python.exe",
            "C:\Python312\python.exe"
        )
        
        foreach ($pyPath in $pythonPaths) {
            if (Test-Path $pyPath) {
                Write-Log "Python found at: $pyPath" "SUCCESS"
                # PATH„Å´ËøΩÂä†Ôºà‰∏ÄÊôÇÁöÑÔºâ
                $env:PATH = (Split-Path $pyPath -Parent) + ";" + $env:PATH
                return $true
            }
        }
        
        Write-Log "Python„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„ÄÇ„Ç§„É≥„Çπ„Éà„Éº„É´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ" "ERROR"
        Write-Log "Êé®Â•®: Python 3.9‰ª•‰∏ä from https://www.python.org/" "INFO"
        return $false
    }
    
    # ‰ªÆÊÉ≥Áí∞Â¢É„ÉÅ„Çß„ÉÉ„ÇØ
    [bool] CheckVenv() {
        Write-Log "‰ªÆÊÉ≥Áí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." "INFO"
        
        $venvPath = Join-Path $this.BackendPath "venv"
        if (Test-Path $venvPath) {
            $venvPython = Join-Path $venvPath "Scripts\python.exe"
            if (Test-Path $venvPython) {
                Write-Log "‰ªÆÊÉ≥Áí∞Â¢É„ÅåÂ≠òÂú®„Åó„Åæ„Åô" "SUCCESS"
                return $true
            }
        }
        
        $this.Errors["venv"] = "‰ªÆÊÉ≥Áí∞Â¢É„Åå‰∏çÂÆåÂÖ®„Åæ„Åü„ÅØÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
        return $false
    }
    
    # ‰ªÆÊÉ≥Áí∞Â¢É‰øÆÂæ©
    [bool] FixVenv() {
        Write-Log "‰ªÆÊÉ≥Áí∞Â¢É„Çí‰ΩúÊàê/‰øÆÂæ©‰∏≠..." "FIX"
        
        Push-Location $this.BackendPath
        
        # Êó¢Â≠ò„ÅÆ‰ªÆÊÉ≥Áí∞Â¢É„ÇíÂâäÈô§
        $venvPath = ".\venv"
        if (Test-Path $venvPath) {
            Write-Log "Êó¢Â≠ò„ÅÆ‰ªÆÊÉ≥Áí∞Â¢É„ÇíÂâäÈô§‰∏≠..." "INFO"
            Remove-Item $venvPath -Recurse -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
        }
        
        # Êñ∞„Åó„ÅÑ‰ªÆÊÉ≥Áí∞Â¢É„Çí‰ΩúÊàê
        Write-Log "Êñ∞„Åó„ÅÑ‰ªÆÊÉ≥Áí∞Â¢É„Çí‰ΩúÊàê‰∏≠..." "INFO"
        & python -m venv venv 2>&1 | Out-Null
        
        if ($LASTEXITCODE -eq 0 -and (Test-Path ".\venv\Scripts\python.exe")) {
            Write-Log "‰ªÆÊÉ≥Áí∞Â¢É‰ΩúÊàêÊàêÂäü" "SUCCESS"
            Pop-Location
            return $true
        }
        
        Pop-Location
        return $false
    }
    
    # ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
    [bool] CheckDependencies() {
        Write-Log "‰æùÂ≠òÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." "INFO"
        
        Push-Location $this.BackendPath
        
        # requirements.txt„ÅÆÂ≠òÂú®Á¢∫Ë™ç
        if (-not (Test-Path ".\requirements.txt")) {
            $this.Errors["requirements"] = "requirements.txt„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
            Pop-Location
            return $false
        }
        
        # ‰∏ªË¶Å„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÁ¢∫Ë™ç
        $checkScript = @"
import sys
try:
    import fastapi
    import uvicorn
    import lxml
    print('SUCCESS')
except ImportError as e:
    print(f'ERROR: {e}')
    sys.exit(1)
"@
        
        $result = $checkScript | & .\venv\Scripts\python.exe 2>&1
        
        Pop-Location
        
        if ($result -like "*SUCCESS*") {
            Write-Log "‰∏ªË¶Å„Éë„ÉÉ„Ç±„Éº„Ç∏Á¢∫Ë™çOK" "SUCCESS"
            return $true
        }
        
        $this.Errors["dependencies"] = "‰æùÂ≠ò„Éë„ÉÉ„Ç±„Éº„Ç∏„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô"
        return $false
    }
    
    # ‰æùÂ≠òÈñ¢‰øÇ‰øÆÂæ©
    [bool] FixDependencies() {
        Write-Log "‰æùÂ≠òÈñ¢‰øÇ„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..." "FIX"
        
        Push-Location $this.BackendPath
        
        # requirements.txt„ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
        if (-not (Test-Path ".\requirements.txt")) {
            Write-Log "requirements.txt„Çí‰ΩúÊàê‰∏≠..." "INFO"
            $requirements = @"
# Windows 11 SysprepÂøúÁ≠î„Éï„Ç°„Ç§„É´ÁîüÊàê„Ç∑„Çπ„ÉÜ„É† WebUIÁâà
# „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ‰æùÂ≠ò„É©„Ç§„Éñ„É©„É™ - ÂÆâÂÆöÁâà

# FastAPIÈñ¢ÈÄ£ÔºàÂÆâÂÆöÁâàÔºâ
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6

# WebSocketÈÄö‰ø°
websockets==12.0

# XMLÂá¶ÁêÜ
lxml==4.9.3

# Ë®≠ÂÆöÁÆ°ÁêÜ
pydantic==2.5.0

# YAML„Çµ„Éù„Éº„Éà
PyYAML==6.0.1

# ÈùûÂêåÊúüÂá¶ÁêÜ
aiofiles==23.2.1

# „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
psutil==5.9.6

# ÈñãÁô∫ÊîØÊè¥Ôºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
python-dotenv==1.0.0
"@
            Set-Content -Path ".\requirements.txt" -Value $requirements -Encoding UTF8
        }
        
        # pip„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
        Write-Log "pip„Çí„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ‰∏≠..." "DEBUG"
        & .\venv\Scripts\python.exe -m pip install --upgrade pip --quiet 2>&1 | Out-Null
        
        # „Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´
        Write-Log "„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠..." "INFO"
        & .\venv\Scripts\pip.exe install -r requirements.txt --quiet 2>&1 | Out-Null
        
        if ($LASTEXITCODE -eq 0) {
            Write-Log "‰æùÂ≠òÈñ¢‰øÇ„Ç§„É≥„Çπ„Éà„Éº„É´ÊàêÂäü" "SUCCESS"
            Pop-Location
            return $true
        }
        
        # ÂÄãÂà•„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíË©¶„Åø„Çã
        Write-Log "ÂÄãÂà•„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´„ÇíË©¶Ë°å‰∏≠..." "FIX"
        $packages = @(
            "fastapi==0.104.1",
            "uvicorn[standard]==0.24.0",
            "pydantic==2.5.0",
            "lxml==4.9.3",
            "PyYAML==6.0.1",
            "psutil==5.9.6"
        )
        
        foreach ($package in $packages) {
            Write-Log "Installing: $package" "DEBUG"
            & .\venv\Scripts\pip.exe install $package --quiet 2>&1 | Out-Null
        }
        
        Pop-Location
        return $true
    }
    
    # XMLÁîüÊàê„É¢„Ç∏„É•„Éº„É´„ÉÅ„Çß„ÉÉ„ÇØ
    [bool] CheckXMLGenerator() {
        Write-Log "XMLÁîüÊàê„É¢„Ç∏„É•„Éº„É´„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." "INFO"
        
        $xmlGenPath = Join-Path $this.BackendPath "xml_generator.py"
        if (-not (Test-Path $xmlGenPath)) {
            $this.Errors["xml_generator"] = "xml_generator.py„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
            return $false
        }
        
        # „Ç§„É≥„Éù„Éº„Éà„ÉÜ„Çπ„Éà
        Push-Location $this.BackendPath
        
        $testScript = @"
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

try:
    from xml_generator import UnattendXMLGenerator, XMLGeneratorSubAgent
    print('SUCCESS')
except Exception as e:
    print(f'ERROR: {e}')
    sys.exit(1)
"@
        
        $result = $testScript | & .\venv\Scripts\python.exe 2>&1
        
        Pop-Location
        
        if ($result -like "*SUCCESS*") {
            Write-Log "XMLÁîüÊàê„É¢„Ç∏„É•„Éº„É´Á¢∫Ë™çOK" "SUCCESS"
            return $true
        }
        
        return $false
    }
    
    # main.py„ÉÅ„Çß„ÉÉ„ÇØ
    [bool] CheckMainPy() {
        Write-Log "main.py„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." "INFO"
        
        $mainPath = Join-Path $this.BackendPath "main.py"
        if (-not (Test-Path $mainPath)) {
            $this.Errors["main"] = "main.py„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
            return $false
        }
        
        # „Ç∑„É≥„Çø„ÉÉ„ÇØ„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
        Push-Location $this.BackendPath
        
        $syntaxCheck = & .\venv\Scripts\python.exe -m py_compile main.py 2>&1
        
        if ($LASTEXITCODE -eq 0) {
            Write-Log "main.py„Ç∑„É≥„Çø„ÉÉ„ÇØ„ÇπOK" "SUCCESS"
            
            # „Ç§„É≥„Éù„Éº„Éà„ÉÅ„Çß„ÉÉ„ÇØ
            $importTest = @"
import sys
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

try:
    import main
    print('SUCCESS')
except Exception as e:
    print(f'ERROR: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"@
            
            $result = $importTest | & .\venv\Scripts\python.exe 2>&1
            
            Pop-Location
            
            if ($result -like "*SUCCESS*") {
                return $true
            } else {
                Write-Log "main.py„Ç§„É≥„Éù„Éº„Éà„Ç®„É©„Éº" "ERROR"
                Write-Log "$result" "DEBUG"
                $this.Errors["main_import"] = "main.py„ÅÆ„Ç§„É≥„Éù„Éº„Éà„Å´Â§±Êïó"
            }
        } else {
            $this.Errors["main_syntax"] = "main.py„Å´ÊßãÊñá„Ç®„É©„Éº„Åå„ÅÇ„Çä„Åæ„Åô"
        }
        
        Pop-Location
        return $false
    }
    
    # „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËµ∑Âãï„ÉÜ„Çπ„Éà
    [bool] TestBackendStartup() {
        Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËµ∑Âãï„ÉÜ„Çπ„Éà‰∏≠..." "INFO"
        
        Push-Location $this.BackendPath
        
        # „ÉÜ„Çπ„ÉàÁî®Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà
        $testStartup = @"
import sys
import os
from pathlib import Path
sys.path.insert(0, str(Path(__file__).parent))

# Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
os.environ['TESTING'] = '1'

try:
    import main
    # „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅÆÁ¢∫Ë™ç
    if hasattr(main, 'app'):
        print('SUCCESS: FastAPI app found')
    else:
        print('ERROR: No app object in main.py')
        sys.exit(1)
except Exception as e:
    print(f'ERROR: {e}')
    import traceback
    traceback.print_exc()
    sys.exit(1)
"@
        
        $result = $testStartup | & .\venv\Scripts\python.exe 2>&1
        
        Pop-Location
        
        if ($result -like "*SUCCESS*") {
            Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËµ∑ÂãïÊ∫ñÂÇôOK" "SUCCESS"
            return $true
        }
        
        Write-Log "Ëµ∑Âãï„ÉÜ„Çπ„ÉàÂ§±Êïó: $result" "ERROR"
        return $false
    }
    
    # Áµ±ÂêàË®∫Êñ≠„Éª‰øÆÂæ©
    [bool] DiagnoseAndFix() {
        Write-Log "Áµ±ÂêàË®∫Êñ≠„Éª‰øÆÂæ©„ÇíÈñãÂßã..." "INFO"
        Write-Log "=" * 70 "DEBUG"
        
        $steps = @(
            @{Check = "CheckPython"; Fix = "FixPython"; Name = "PythonÁí∞Â¢É"},
            @{Check = "CheckVenv"; Fix = "FixVenv"; Name = "‰ªÆÊÉ≥Áí∞Â¢É"},
            @{Check = "CheckDependencies"; Fix = "FixDependencies"; Name = "‰æùÂ≠òÈñ¢‰øÇ"},
            @{Check = "CheckXMLGenerator"; Fix = $null; Name = "XMLÁîüÊàê„É¢„Ç∏„É•„Éº„É´"},
            @{Check = "CheckMainPy"; Fix = $null; Name = "main.py"},
            @{Check = "TestBackendStartup"; Fix = $null; Name = "Ëµ∑Âãï„ÉÜ„Çπ„Éà"}
        )
        
        foreach ($step in $steps) {
            Write-Log "„ÉÅ„Çß„ÉÉ„ÇØ: $($step.Name)" "DEBUG"
            
            $checkResult = & { $this.($step.Check)() }
            
            if (-not $checkResult) {
                if ($step.Fix) {
                    Write-Log "$($step.Name)„ÅÆÂïèÈ°å„Çí‰øÆÂæ©‰∏≠..." "FIX"
                    $fixResult = & { $this.($step.Fix)() }
                    
                    if (-not $fixResult) {
                        Write-Log "$($step.Name)„ÅÆ‰øÆÂæ©„Å´Â§±Êïó" "ERROR"
                        return $false
                    }
                    
                    # ‰øÆÂæ©Âæå„Å´ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                    $recheckResult = & { $this.($step.Check)() }
                    if (-not $recheckResult) {
                        Write-Log "$($step.Name)„ÅÆ‰øÆÂæ©Âæå„ÇÇÂïèÈ°å„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô" "ERROR"
                        return $false
                    }
                } else {
                    Write-Log "$($step.Name)„Å´ÂïèÈ°å„Åå„ÅÇ„Çä„Åæ„ÅôÔºàËá™Âãï‰øÆÂæ©‰∏çÂèØÔºâ" "ERROR"
                    return $false
                }
            }
        }
        
        Write-Log "„Åô„Åπ„Å¶„ÅÆË®∫Êñ≠„Éª‰øÆÂæ©„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü" "SUCCESS"
        return $true
    }
}

# ============================================================================
# „É°„Ç§„É≥Âá¶ÁêÜ
# ============================================================================

Clear-Host

Write-Host ""
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
Write-Host "‚ïë              „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËá™ÂãïË®∫Êñ≠„Éª‰øÆÂæ©„Ç∑„Çπ„ÉÜ„É†                          ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïë                  „Ç®„É©„ÉºËá™ÂãïÊ§úÁü•„Éª‰øÆÂæ©ÂØæÂøú                                ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
Write-Host ""

$backendPath = Join-Path $ScriptRoot "backend"

if (-not (Test-Path $backendPath)) {
    Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $backendPath" "ERROR"
    exit 1
}

# AutoFixer„Ç§„É≥„Çπ„Çø„É≥„Çπ‰ΩúÊàê
$fixer = [BackendAutoFixer]::new($backendPath, $MaxRetries)

# Ë®∫Êñ≠„Éª‰øÆÂæ©ÂÆüË°å
$success = $false
$retryCount = 0

while (-not $success -and $retryCount -lt $MaxRetries) {
    if ($retryCount -gt 0) {
        Write-Log "„É™„Éà„É©„Ç§ $retryCount/$MaxRetries" "WARNING"
    }
    
    $success = $fixer.DiagnoseAndFix()
    
    if (-not $success) {
        $retryCount++
        if ($retryCount -lt $MaxRetries) {
            Write-Log "5ÁßíÂæå„Å´ÂÜçË©¶Ë°å„Åó„Åæ„Åô..." "INFO"
            Start-Sleep -Seconds 5
        }
    }
}

Write-Host ""
Write-Host "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" -ForegroundColor Cyan

if ($success) {
    Write-Log "Ë®∫Êñ≠„Éª‰øÆÂæ©ÂÆå‰∫ÜÔºÅ" "SUCCESS"
    Write-Host ""
    Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÇíËµ∑Âãï„Åó„Å¶„ÅÑ„Åæ„Åô..." "INFO"
    
    # „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËµ∑Âãï
    Push-Location $backendPath
    
    # „Éê„ÉÉ„ÉÅ„Éï„Ç°„Ç§„É´‰ΩúÊàê
    $startBatch = @"
@echo off
cd /d "$backendPath"
echo ======================================
echo  „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Çµ„Éº„Éê„ÉºËµ∑Âãï
echo  Context7 + SubAgent(42‰Ωì)
echo ======================================
echo.
echo URL: http://192.168.3.92:8080
echo API Docs: http://192.168.3.92:8080/api/docs
echo.

if exist venv\Scripts\python.exe (
    venv\Scripts\python.exe main.py
) else (
    python main.py
)
"@
    
    $tempBatch = "$env:TEMP\start-backend-fixed-$(Get-Random).bat"
    Set-Content -Path $tempBatch -Value $startBatch -Encoding UTF8
    
    Write-Log "Êñ∞„Åó„ÅÑ„Ç¶„Ç£„É≥„Éâ„Ç¶„Åß„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÇíËµ∑Âãï‰∏≠..." "INFO"
    Start-Process cmd -ArgumentList "/k", $tempBatch -WindowStyle Normal
    
    Pop-Location
    
    # Ëµ∑ÂãïÁ¢∫Ë™ç
    Write-Log "Ëµ∑ÂãïÁ¢∫Ë™ç‰∏≠..." "INFO"
    Start-Sleep -Seconds 5
    
    try {
        $response = Invoke-WebRequest -Uri "http://192.168.3.92:8080/api/status" -UseBasicParsing -TimeoutSec 5
        if ($response.StatusCode -eq 200) {
            Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅåÊ≠£Â∏∏„Å´Ëµ∑Âãï„Åó„Åæ„Åó„ÅüÔºÅ" "SUCCESS"
            Write-Host ""
            Write-Host "üìå „Ç¢„ÇØ„Çª„ÇπURL:" -ForegroundColor White
            Write-Host "   API: http://192.168.3.92:8080" -ForegroundColor Cyan
            Write-Host "   API Docs: http://192.168.3.92:8080/api/docs" -ForegroundColor Cyan
        }
    } catch {
        Write-Log "„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆËµ∑ÂãïÁ¢∫Ë™ç„Å´Â§±ÊïóÔºàÊâãÂãï„ÅßÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºâ" "WARNING"
    }
    
} else {
    Write-Log "‰øÆÂæ©„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" "ERROR"
    Write-Host ""
    Write-Log "Ê§úÂá∫„Åï„Çå„Åü„Ç®„É©„Éº:" "ERROR"
    foreach ($error in $fixer.Errors.GetEnumerator()) {
        Write-Host "  - $($error.Key): $($error.Value)" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Log "ÊâãÂãï„Åß„ÅÆÂØæÂá¶„ÅåÂøÖË¶Å„Åß„Åô:" "WARNING"
    Write-Host "  1. Python 3.9‰ª•‰∏ä„Åå„Ç§„É≥„Çπ„Éà„Éº„É´„Åï„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç" -ForegroundColor Yellow
    Write-Host "  2. backend\venv„Éï„Ç©„É´„ÉÄ„ÇíÂâäÈô§„Åó„Å¶ÂÜçÂÆüË°å" -ForegroundColor Yellow
    Write-Host "  3. „Åù„Çå„Åß„ÇÇÂ§±Êïó„Åô„ÇãÂ†¥Âêà„ÅØ backend\main.py „ÇíÁ¢∫Ë™ç" -ForegroundColor Yellow
}

Write-Host ""
if (-not $success) {
    Read-Host "Enter„Ç≠„Éº„ÅßÁµÇ‰∫Ü"
}