# ============================================================================
# „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÔºã„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ Áµ±ÂêàËá™ÂãïË®∫Êñ≠„Éª‰øÆÂæ©„Çπ„ÇØ„É™„Éó„Éà
# Windows 11 ÁÑ°‰∫∫ÂøúÁ≠î„Éï„Ç°„Ç§„É´ÁîüÊàê„Ç∑„Çπ„ÉÜ„É†
# ============================================================================

param(
    [switch]$Verbose,        # Ë©≥Á¥∞„É≠„Ç∞Ë°®Á§∫„É¢„Éº„Éâ
    [switch]$Force,          # Âº∑Âà∂‰øÆÂæ©„É¢„Éº„Éâ
    [int]$MaxRetries = 3,    # „É™„Éà„É©„Ç§ÂõûÊï∞ÊåáÂÆö
    [switch]$SkipFrontend,   # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Çí„Çπ„Ç≠„ÉÉ„Éó
    [switch]$SkipBackend,    # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Çí„Çπ„Ç≠„ÉÉ„Éó
    [switch]$Parallel        # ‰∏¶ÂàóË®∫Êñ≠„Éª‰øÆÂæ©„É¢„Éº„Éâ
)

$ScriptRoot = Split-Path -Parent $MyInvocation.MyCommand.Path
$ErrorActionPreference = "Continue"
$global:StartTime = Get-Date

# ============================================================================
# „Ç´„É©„Éº„É≠„Ç∞Èñ¢Êï∞
# ============================================================================
function Write-ColorLog {
    param(
        [string]$Message,
        [string]$Level = "INFO",
        [string]$Component = "SYSTEM"
    )
    
    $timestamp = Get-Date -Format "HH:mm:ss"
    $prefix = "[$timestamp][$Component]"
    
    switch ($Level) {
        "SUCCESS" { Write-Host "$prefix ‚úÖ $Message" -ForegroundColor Green }
        "ERROR"   { Write-Host "$prefix ‚ùå $Message" -ForegroundColor Red }
        "WARNING" { Write-Host "$prefix ‚ö†Ô∏è  $Message" -ForegroundColor Yellow }
        "INFO"    { Write-Host "$prefix ‚ÑπÔ∏è  $Message" -ForegroundColor Cyan }
        "DEBUG"   { if ($Verbose) { Write-Host "$prefix üîç $Message" -ForegroundColor Gray } }
        "FIX"     { Write-Host "$prefix üîß $Message" -ForegroundColor Magenta }
        "PROGRESS" { Write-Host "$prefix ‚è≥ $Message" -ForegroundColor White }
    }
}

# ============================================================================
# Âü∫Â∫ïË®∫Êñ≠„Éª‰øÆÂæ©„ÇØ„É©„Çπ
# ============================================================================
class AutoFixer {
    [string]$Name
    [string]$Path
    [hashtable]$Errors = @{}
    [bool]$Fixed = $false
    [System.Collections.ArrayList]$Log = @()
    
    AutoFixer([string]$name, [string]$path) {
        $this.Name = $name
        $this.Path = $path
    }
    
    [void] LogMessage([string]$message, [string]$level) {
        $this.Log.Add(@{
            Time = Get-Date
            Level = $level
            Message = $message
        }) | Out-Null
        Write-ColorLog $message $level $this.Name
    }
    
    [bool] TestPort([int]$port) {
        try {
            $connection = New-Object System.Net.Sockets.TcpClient
            $connection.Connect("127.0.0.1", $port)
            $connection.Close()
            return $true
        } catch {
            return $false
        }
    }
}

# ============================================================================
# „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®∫Êñ≠„Éª‰øÆÂæ©„ÇØ„É©„Çπ
# ============================================================================
class BackendFixer : AutoFixer {
    [int]$Port = 8080
    
    BackendFixer([string]$path) : base("BACKEND", $path) {}
    
    [bool] CheckPython() {
        $this.LogMessage("PythonÁí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠..." , "INFO")
        
        try {
            $pythonVersion = & python --version 2>&1
            if ($LASTEXITCODE -eq 0) {
                $this.LogMessage("PythonÊ§úÂá∫: $pythonVersion", "SUCCESS")
                return $true
            }
        } catch {}
        
        $this.Errors["python"] = "Python„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return $false
    }
    
    [bool] FixPython() {
        $this.LogMessage("PythonÁí∞Â¢É„Çí‰øÆÂæ©‰∏≠...", "FIX")
        
        $pythonPaths = @(
            "$env:LOCALAPPDATA\Programs\Python\Python39\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python310\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python311\python.exe",
            "$env:LOCALAPPDATA\Programs\Python\Python312\python.exe",
            "C:\Python39\python.exe",
            "C:\Python310\python.exe",
            "C:\Python311\python.exe"
        )
        
        foreach ($pyPath in $pythonPaths) {
            if (Test-Path $pyPath) {
                $env:PATH = (Split-Path $pyPath -Parent) + ";" + $env:PATH
                $this.LogMessage("Python„Éë„Çπ„ÇíË®≠ÂÆö: $pyPath", "SUCCESS")
                return $true
            }
        }
        
        $this.LogMessage("Python„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂøÖË¶Å„Åß„Åô", "ERROR")
        return $false
    }
    
    [bool] CheckVenv() {
        $this.LogMessage("‰ªÆÊÉ≥Áí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        $venvPath = Join-Path $this.Path "venv"
        $venvPython = Join-Path $venvPath "Scripts\python.exe"
        
        if (Test-Path $venvPython) {
            $this.LogMessage("‰ªÆÊÉ≥Áí∞Â¢ÉOK", "SUCCESS")
            return $true
        }
        
        $this.Errors["venv"] = "‰ªÆÊÉ≥Áí∞Â¢É„Åå‰∏çÂÆåÂÖ®"
        return $false
    }
    
    [bool] FixVenv() {
        $this.LogMessage("‰ªÆÊÉ≥Áí∞Â¢É„Çí‰ΩúÊàê‰∏≠...", "FIX")
        
        Push-Location $this.Path
        
        if (Test-Path ".\venv") {
            Remove-Item ".\venv" -Recurse -Force -ErrorAction SilentlyContinue
            Start-Sleep -Seconds 2
        }
        
        & python -m venv venv 2>&1 | Out-Null
        
        Pop-Location
        
        if (Test-Path (Join-Path $this.Path "venv\Scripts\python.exe")) {
            $this.LogMessage("‰ªÆÊÉ≥Áí∞Â¢É‰ΩúÊàêÊàêÂäü", "SUCCESS")
            return $true
        }
        
        return $false
    }
    
    [bool] CheckDependencies() {
        $this.LogMessage("Python‰æùÂ≠òÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        Push-Location $this.Path
        
        if (-not (Test-Path ".\requirements.txt")) {
            $this.CreateRequirements()
        }
        
        $checkScript = @"
import sys
try:
    import fastapi
    import uvicorn
    import lxml
    print('OK')
except ImportError as e:
    print(f'ERROR: {e}')
    sys.exit(1)
"@
        
        $result = $checkScript | & .\venv\Scripts\python.exe 2>&1
        Pop-Location
        
        if ($result -like "*OK*") {
            $this.LogMessage("‰æùÂ≠òÈñ¢‰øÇOK", "SUCCESS")
            return $true
        }
        
        $this.Errors["dependencies"] = "„Éë„ÉÉ„Ç±„Éº„Ç∏‰∏çË∂≥"
        return $false
    }
    
    [bool] FixDependencies() {
        $this.LogMessage("‰æùÂ≠ò„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...", "FIX")
        
        Push-Location $this.Path
        
        # pip„Ç¢„ÉÉ„Éó„Ç∞„É¨„Éº„Éâ
        & .\venv\Scripts\python.exe -m pip install --upgrade pip --quiet 2>&1 | Out-Null
        
        # requirements.txt„Åã„Çâ„Ç§„É≥„Çπ„Éà„Éº„É´
        & .\venv\Scripts\pip.exe install -r requirements.txt --quiet 2>&1 | Out-Null
        
        Pop-Location
        
        if ($LASTEXITCODE -eq 0) {
            $this.LogMessage("‰æùÂ≠òÈñ¢‰øÇ„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü", "SUCCESS")
            return $true
        }
        
        # ÂÄãÂà•„Ç§„É≥„Çπ„Éà„Éº„É´
        $this.LogMessage("ÂÄãÂà•„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...", "FIX")
        Push-Location $this.Path
        
        $packages = @(
            "fastapi==0.104.1",
            "uvicorn[standard]==0.24.0",
            "pydantic==2.5.0",
            "lxml==4.9.3",
            "psutil==5.9.6"
        )
        
        foreach ($pkg in $packages) {
            & .\venv\Scripts\pip.exe install $pkg --quiet 2>&1 | Out-Null
        }
        
        Pop-Location
        return $true
    }
    
    [void] CreateRequirements() {
        $requirements = @"
fastapi==0.104.1
uvicorn[standard]==0.24.0
python-multipart==0.0.6
websockets==12.0
lxml==4.9.3
pydantic==2.5.0
PyYAML==6.0.1
aiofiles==23.2.1
psutil==5.9.6
python-dotenv==1.0.0
"@
        Set-Content -Path (Join-Path $this.Path "requirements.txt") -Value $requirements -Encoding UTF8
    }
    
    [bool] StartServer() {
        $this.LogMessage("„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï‰∏≠...", "PROGRESS")
        
        $startScript = @"
@echo off
cd /d "$($this.Path)"
echo Starting Backend Server...
if exist venv\Scripts\python.exe (
    venv\Scripts\python.exe main.py
) else (
    python main.py
)
"@
        
        $tempBatch = "$env:TEMP\start-backend-$(Get-Random).bat"
        Set-Content -Path $tempBatch -Value $startScript -Encoding UTF8
        
        Start-Process cmd -ArgumentList "/k", $tempBatch -WindowStyle Minimized
        
        # Ëµ∑ÂãïÂæÖÊ©ü
        $timeout = 30
        $elapsed = 0
        while ($elapsed -lt $timeout) {
            if ($this.TestPort($this.Port)) {
                $this.LogMessage("„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü (Port: $($this.Port))", "SUCCESS")
                return $true
            }
            Start-Sleep -Seconds 2
            $elapsed += 2
        }
        
        $this.LogMessage("„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâËµ∑Âãï„Çø„Ç§„É†„Ç¢„Ç¶„Éà", "ERROR")
        return $false
    }
    
    [bool] DiagnoseAndFix([bool]$force) {
        $this.LogMessage("Ë®∫Êñ≠ÈñãÂßã...", "INFO")
        
        $steps = @(
            @{Check = "CheckPython"; Fix = "FixPython"},
            @{Check = "CheckVenv"; Fix = "FixVenv"},
            @{Check = "CheckDependencies"; Fix = "FixDependencies"}
        )
        
        foreach ($step in $steps) {
            $checkMethod = $step.Check
            $fixMethod = $step.Fix
            
            if (-not $this.$checkMethod()) {
                if ($force -or $fixMethod) {
                    if (-not $this.$fixMethod()) {
                        return $false
                    }
                    # ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                    if (-not $this.$checkMethod()) {
                        return $false
                    }
                } else {
                    return $false
                }
            }
        }
        
        $this.Fixed = $true
        return $true
    }
}

# ============================================================================
# „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâË®∫Êñ≠„Éª‰øÆÂæ©„ÇØ„É©„Çπ
# ============================================================================
class FrontendFixer : AutoFixer {
    [int]$Port = 3050
    
    FrontendFixer([string]$path) : base("FRONTEND", $path) {}
    
    [bool] CheckNode() {
        $this.LogMessage("Node.jsÁí∞Â¢É„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        try {
            $nodeVersion = & node --version 2>&1
            $npmVersion = & npm --version 2>&1
            
            if ($LASTEXITCODE -eq 0) {
                $this.LogMessage("Node.js $nodeVersion / npm $npmVersion", "SUCCESS")
                return $true
            }
        } catch {}
        
        $this.Errors["node"] = "Node.js„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì"
        return $false
    }
    
    [bool] FixNode() {
        $this.LogMessage("Node.jsÁí∞Â¢É„ÇíÁ¢∫Ë™ç‰∏≠...", "FIX")
        
        # Node.js„Éë„Çπ„ÇíÊé¢„Åô
        $nodePaths = @(
            "$env:ProgramFiles\nodejs\node.exe",
            "$env:ProgramFiles(x86)\nodejs\node.exe",
            "$env:LOCALAPPDATA\Programs\node\node.exe"
        )
        
        foreach ($nodePath in $nodePaths) {
            if (Test-Path $nodePath) {
                $env:PATH = (Split-Path $nodePath -Parent) + ";" + $env:PATH
                $this.LogMessage("Node.js„Éë„Çπ„ÇíË®≠ÂÆö: $nodePath", "SUCCESS")
                return $true
            }
        }
        
        $this.LogMessage("Node.js„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´„ÅåÂøÖË¶Å„Åß„Åô", "ERROR")
        $this.LogMessage("https://nodejs.org/ „Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", "INFO")
        return $false
    }
    
    [bool] CheckPackageJson() {
        $this.LogMessage("package.json„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        $packagePath = Join-Path $this.Path "package.json"
        if (Test-Path $packagePath) {
            $this.LogMessage("package.json OK", "SUCCESS")
            return $true
        }
        
        $this.Errors["package"] = "package.json„ÅåÂ≠òÂú®„Åó„Åæ„Åõ„Çì"
        return $false
    }
    
    [bool] FixPackageJson() {
        $this.LogMessage("package.json„Çí‰ΩúÊàê‰∏≠...", "FIX")
        
        $packageJson = @{
            name = "windows11-unattend-generator"
            version = "1.0.0"
            private = $true
            scripts = @{
                dev = "next dev -p 3050"
                build = "next build"
                start = "next start -p 3050"
                lint = "next lint"
            }
            dependencies = @{
                next = "14.0.4"
                react = "18.2.0"
                "react-dom" = "18.2.0"
                typescript = "5.3.3"
            }
            devDependencies = @{
                "@types/node" = "20.10.5"
                "@types/react" = "18.2.45"
                "@types/react-dom" = "18.2.18"
                "eslint" = "8.56.0"
                "eslint-config-next" = "14.0.4"
            }
        }
        
        $jsonContent = $packageJson | ConvertTo-Json -Depth 10
        Set-Content -Path (Join-Path $this.Path "package.json") -Value $jsonContent -Encoding UTF8
        
        $this.LogMessage("package.json‰ΩúÊàêÂÆå‰∫Ü", "SUCCESS")
        return $true
    }
    
    [bool] CheckNodeModules() {
        $this.LogMessage("Node.js‰æùÂ≠òÈñ¢‰øÇ„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        $modulesPath = Join-Path $this.Path "node_modules"
        $nextPath = Join-Path $modulesPath "next"
        
        if (Test-Path $nextPath) {
            $this.LogMessage("node_modules OK", "SUCCESS")
            return $true
        }
        
        $this.Errors["modules"] = "node_modules„Åå‰∏çÂÆåÂÖ®"
        return $false
    }
    
    [bool] FixNodeModules() {
        $this.LogMessage("Node.js„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...", "FIX")
        
        Push-Location $this.Path
        
        # node_modules„ÇíÂâäÈô§Ôºà„ÇØ„É™„Éº„É≥„Ç§„É≥„Çπ„Éà„Éº„É´Ôºâ
        if (Test-Path ".\node_modules") {
            $this.LogMessage("Êó¢Â≠ò„ÅÆnode_modules„ÇíÂâäÈô§‰∏≠...", "INFO")
            Remove-Item ".\node_modules" -Recurse -Force -ErrorAction SilentlyContinue
        }
        
        # package-lock.json„ÇÇÂâäÈô§
        if (Test-Path ".\package-lock.json") {
            Remove-Item ".\package-lock.json" -Force -ErrorAction SilentlyContinue
        }
        
        # npm installÂÆüË°åÔºàcmdÁµåÁî±Ôºâ
        $this.LogMessage("npm install„ÇíÂÆüË°å‰∏≠ÔºàÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„ÅôÔºâ...", "PROGRESS")
        & cmd /c "npm install" 2>&1 | Out-Null
        
        Pop-Location
        
        if ($LASTEXITCODE -eq 0) {
            $this.LogMessage("„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´ÂÆå‰∫Ü", "SUCCESS")
            return $true
        }
        
        # ÂÄãÂà•„Ç§„É≥„Çπ„Éà„Éº„É´Ë©¶Ë°å
        $this.LogMessage("ÂÄãÂà•„Éë„ÉÉ„Ç±„Éº„Ç∏„Ç§„É≥„Çπ„Éà„Éº„É´‰∏≠...", "FIX")
        Push-Location $this.Path
        
        $packages = @("next", "react", "react-dom", "typescript")
        foreach ($pkg in $packages) {
            & cmd /c "npm install $pkg" 2>&1 | Out-Null
        }
        
        Pop-Location
        return $true
    }
    
    [bool] CheckNextConfig() {
        $this.LogMessage("Next.jsË®≠ÂÆö„Çí„ÉÅ„Çß„ÉÉ„ÇØ‰∏≠...", "INFO")
        
        $configPath = Join-Path $this.Path "next.config.js"
        if (-not (Test-Path $configPath)) {
            # ‰ΩúÊàê
            $config = @"
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
}

module.exports = nextConfig
"@
            Set-Content -Path $configPath -Value $config -Encoding UTF8
        }
        
        $this.LogMessage("Next.jsË®≠ÂÆö OK", "SUCCESS")
        return $true
    }
    
    [bool] StartServer() {
        $this.LogMessage("„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï‰∏≠...", "PROGRESS")
        
        $startScript = @"
@echo off
chcp 65001 > nul
cd /d "$($this.Path)"
echo Starting Frontend Server...
set NEXT_PUBLIC_API_URL=http://192.168.3.92:8080/api
set NEXT_PUBLIC_LOCAL_IP=192.168.3.92
npm run dev
"@
        
        $tempBatch = "$env:TEMP\start-frontend-$(Get-Random).bat"
        Set-Content -Path $tempBatch -Value $startScript -Encoding UTF8
        
        Start-Process cmd -ArgumentList "/k", $tempBatch -WindowStyle Minimized
        
        # Ëµ∑ÂãïÂæÖÊ©üÔºàNext.js„ÅØÊôÇÈñì„Åå„Åã„Åã„ÇãÔºâ
        $timeout = 60
        $elapsed = 0
        while ($elapsed -lt $timeout) {
            if ($this.TestPort($this.Port)) {
                $this.LogMessage("„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅåËµ∑Âãï„Åó„Åæ„Åó„Åü (Port: $($this.Port))", "SUCCESS")
                return $true
            }
            Start-Sleep -Seconds 3
            $elapsed += 3
        }
        
        $this.LogMessage("„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâËµ∑Âãï„Çø„Ç§„É†„Ç¢„Ç¶„Éà", "WARNING")
        return $false
    }
    
    [bool] DiagnoseAndFix([bool]$force) {
        $this.LogMessage("Ë®∫Êñ≠ÈñãÂßã...", "INFO")
        
        $steps = @(
            @{Check = "CheckNode"; Fix = "FixNode"},
            @{Check = "CheckPackageJson"; Fix = "FixPackageJson"},
            @{Check = "CheckNodeModules"; Fix = "FixNodeModules"},
            @{Check = "CheckNextConfig"; Fix = $null}
        )
        
        foreach ($step in $steps) {
            $checkMethod = $step.Check
            $fixMethod = $step.Fix
            
            if (-not $this.$checkMethod()) {
                if ($force -or $fixMethod) {
                    if ($fixMethod -and -not $this.$fixMethod()) {
                        return $false
                    }
                    # ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
                    if (-not $this.$checkMethod()) {
                        return $false
                    }
                }
            }
        }
        
        $this.Fixed = $true
        return $true
    }
}

# ============================================================================
# Áµ±ÂêàË®∫Êñ≠„Éª‰øÆÂæ©„Éû„Éç„Éº„Ç∏„É£„Éº
# ============================================================================
class SystemDiagnosticManager {
    [BackendFixer]$Backend
    [FrontendFixer]$Frontend
    [bool]$Parallel
    [int]$MaxRetries
    [bool]$Force
    [bool]$Verbose
    
    SystemDiagnosticManager([string]$rootPath, [hashtable]$options) {
        $this.Backend = [BackendFixer]::new((Join-Path $rootPath "backend"))
        $this.Frontend = [FrontendFixer]::new((Join-Path $rootPath "frontend"))
        $this.Parallel = $options.Parallel
        $this.MaxRetries = $options.MaxRetries
        $this.Force = $options.Force
        $this.Verbose = $options.Verbose
    }
    
    [bool] RunDiagnostics([bool]$skipFrontend, [bool]$skipBackend) {
        Write-ColorLog "Áµ±ÂêàË®∫Êñ≠„ÇíÈñãÂßã„Åó„Åæ„Åô..." "INFO" "SYSTEM"
        
        $success = $true
        
        if ($this.Parallel -and -not $skipFrontend -and -not $skipBackend) {
            # ‰∏¶ÂàóË®∫Êñ≠Ôºà‰øÆÊ≠£ÁâàÔºö„ÇØ„É©„Çπ„ÇíÂÜç‰ΩúÊàêÔºâ
            Write-ColorLog "‰∏¶ÂàóË®∫Êñ≠„É¢„Éº„Éâ„ÅßÂÆüË°å‰∏≠..." "INFO" "SYSTEM"
            
            $backendPath = $this.Backend.Path
            $force = $this.Force
            
            $backendJob = Start-Job -ScriptBlock {
                param($path, $forceMode)
                
                # „ÇØ„É©„ÇπÂÆöÁæ©„ÇíÂÜçÂ∫¶Ë™≠„ÅøËæº„ÇÄ
                Add-Type -TypeDefinition @"
                using System;
                using System.Collections;
                
                public class SimpleBackendFixer {
                    public string Path { get; set; }
                    public bool Fixed { get; set; }
                    
                    public SimpleBackendFixer(string path) {
                        Path = path;
                        Fixed = false;
                    }
                    
                    public bool DiagnoseAndFix(bool force) {
                        // Âü∫Êú¨ÁöÑ„Å™Ë®∫Êñ≠„ÅÆ„ÅøÂÆüË°å
                        try {
                            // PythonÁ¢∫Ë™ç
                            var pythonResult = System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo {
                                FileName = "python",
                                Arguments = "--version",
                                RedirectStandardOutput = true,
                                UseShellExecute = false,
                                CreateNoWindow = true
                            });
                            pythonResult.WaitForExit();
                            
                            if (pythonResult.ExitCode == 0) {
                                Fixed = true;
                                return true;
                            }
                        } catch {
                            return false;
                        }
                        return false;
                    }
                }
"@
                
                $backend = New-Object SimpleBackendFixer($path)
                return $backend.DiagnoseAndFix($forceMode)
            } -ArgumentList $backendPath, $force
            
            $frontendPath = $this.Frontend.Path
            
            $frontendJob = Start-Job -ScriptBlock {
                param($path, $forceMode)
                
                # „ÇØ„É©„ÇπÂÆöÁæ©„ÇíÂÜçÂ∫¶Ë™≠„ÅøËæº„ÇÄ
                Add-Type -TypeDefinition @"
                using System;
                using System.Collections;
                
                public class SimpleFrontendFixer {
                    public string Path { get; set; }
                    public bool Fixed { get; set; }
                    
                    public SimpleFrontendFixer(string path) {
                        Path = path;
                        Fixed = false;
                    }
                    
                    public bool DiagnoseAndFix(bool force) {
                        // Âü∫Êú¨ÁöÑ„Å™Ë®∫Êñ≠„ÅÆ„ÅøÂÆüË°å
                        try {
                            // NodeÁ¢∫Ë™ç
                            var nodeResult = System.Diagnostics.Process.Start(new System.Diagnostics.ProcessStartInfo {
                                FileName = "node",
                                Arguments = "--version",
                                RedirectStandardOutput = true,
                                UseShellExecute = false,
                                CreateNoWindow = true
                            });
                            nodeResult.WaitForExit();
                            
                            if (nodeResult.ExitCode == 0) {
                                Fixed = true;
                                return true;
                            }
                        } catch {
                            return false;
                        }
                        return false;
                    }
                }
"@
                
                $frontend = New-Object SimpleFrontendFixer($path)
                return $frontend.DiagnoseAndFix($forceMode)
            } -ArgumentList $frontendPath, $force
            
            # „Ç∏„Éß„ÉñÂÆå‰∫ÜÂæÖÊ©ü
            $jobs = @($backendJob, $frontendJob)
            $null = $jobs | Wait-Job
            
            # ÁµêÊûúÂèñÂæó
            $backendResult = Receive-Job -Job $backendJob -ErrorAction SilentlyContinue
            $frontendResult = Receive-Job -Job $frontendJob -ErrorAction SilentlyContinue
            
            # „Ç∏„Éß„Éñ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
            $jobs | Remove-Job -Force
            
            # ÁµêÊûúÂà§ÂÆöÔºànull„ÉÅ„Çß„ÉÉ„ÇØ‰ªò„ÅçÔºâ
            $backendSuccess = if ($null -ne $backendResult) { $backendResult } else { $false }
            $frontendSuccess = if ($null -ne $frontendResult) { $frontendResult } else { $false }
            
            # ÂÆüÈöõ„ÅÆË®∫Êñ≠„ÅØÈ†ÜÊ¨°ÂÆüË°å„Å´Âàá„ÇäÊõø„Åà
            if (-not $backendSuccess -or -not $frontendSuccess) {
                Write-ColorLog "‰∏¶ÂàóË®∫Êñ≠„ÅßÂïèÈ°å„ÇíÊ§úÂá∫„ÄÇË©≥Á¥∞Ë®∫Êñ≠„Å´Âàá„ÇäÊõø„Åà„Åæ„Åô..." "WARNING" "SYSTEM"
                
                # „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË©≥Á¥∞Ë®∫Êñ≠
                if (-not $this.Backend.DiagnoseAndFix($this.Force)) {
                    $success = $false
                } else {
                    $this.Backend.Fixed = $true
                }
                
                # „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâË©≥Á¥∞Ë®∫Êñ≠
                if (-not $this.Frontend.DiagnoseAndFix($this.Force)) {
                    $success = $false
                } else {
                    $this.Frontend.Fixed = $true
                }
            } else {
                $this.Backend.Fixed = $true
                $this.Frontend.Fixed = $true
                $success = $true
            }
        } else {
            # È†ÜÊ¨°Ë®∫Êñ≠
            if (-not $skipBackend) {
                $retries = 0
                while ($retries -lt $this.MaxRetries) {
                    if ($this.Backend.DiagnoseAndFix($this.Force)) {
                        break
                    }
                    $retries++
                    if ($retries -lt $this.MaxRetries) {
                        Write-ColorLog "„Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâË®∫Êñ≠„É™„Éà„É©„Ç§ ($retries/$($this.MaxRetries))..." "WARNING" "SYSTEM"
                        Start-Sleep -Seconds 3
                    } else {
                        $success = $false
                    }
                }
            }
            
            if (-not $skipFrontend -and $success) {
                $retries = 0
                while ($retries -lt $this.MaxRetries) {
                    if ($this.Frontend.DiagnoseAndFix($this.Force)) {
                        break
                    }
                    $retries++
                    if ($retries -lt $this.MaxRetries) {
                        Write-ColorLog "„Éï„É≠„É≥„Éà„Ç®„É≥„ÉâË®∫Êñ≠„É™„Éà„É©„Ç§ ($retries/$($this.MaxRetries))..." "WARNING" "SYSTEM"
                        Start-Sleep -Seconds 3
                    } else {
                        $success = $false
                    }
                }
            }
        }
        
        return $success
    }
    
    [bool] StartServers([bool]$skipFrontend, [bool]$skipBackend) {
        Write-ColorLog "„Çµ„Éº„Éê„Éº„ÇíËµ∑Âãï‰∏≠..." "INFO" "SYSTEM"
        
        $success = $true
        
        if (-not $skipBackend) {
            if (-not $this.Backend.StartServer()) {
                $success = $false
            }
        }
        
        if (-not $skipFrontend -and $success) {
            # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆÂÆâÂÆöÂæÖÊ©ü
            Start-Sleep -Seconds 3
            
            if (-not $this.Frontend.StartServer()) {
                Write-ColorLog "„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅØËµ∑ÂãïÂá¶ÁêÜ‰∏≠„Åß„ÅôÔºà„Éì„É´„Éâ„Å´ÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„ÅôÔºâ" "WARNING" "SYSTEM"
            }
        }
        
        return $success
    }
    
    [void] ShowReport() {
        Write-Host ""
        Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
        Write-Host "‚ïë                           Ë®∫Êñ≠„Éª‰øÆÂæ©„É¨„Éù„Éº„Éà                              ‚ïë" -ForegroundColor Cyan
        Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
        
        # „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„É¨„Éù„Éº„Éà
        Write-Host ""
        Write-Host "„Äê„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Äë" -ForegroundColor Yellow
        if ($this.Backend.Fixed) {
            Write-Host "  ‚úÖ Ë®∫Êñ≠„Éª‰øÆÂæ©ÂÆå‰∫Ü" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå ÂïèÈ°å„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô" -ForegroundColor Red
            foreach ($error in $this.Backend.Errors.GetEnumerator()) {
                Write-Host "    - $($error.Key): $($error.Value)" -ForegroundColor Red
            }
        }
        
        # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„É¨„Éù„Éº„Éà
        Write-Host ""
        Write-Host "„Äê„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Äë" -ForegroundColor Yellow
        if ($this.Frontend.Fixed) {
            Write-Host "  ‚úÖ Ë®∫Êñ≠„Éª‰øÆÂæ©ÂÆå‰∫Ü" -ForegroundColor Green
        } else {
            Write-Host "  ‚ùå ÂïèÈ°å„ÅåÊÆã„Å£„Å¶„ÅÑ„Åæ„Åô" -ForegroundColor Red
            foreach ($error in $this.Frontend.Errors.GetEnumerator()) {
                Write-Host "    - $($error.Key): $($error.Value)" -ForegroundColor Red
            }
        }
        
        # ÂÆüË°åÊôÇÈñì
        $duration = [math]::Round(((Get-Date) - $global:StartTime).TotalSeconds, 1)
        Write-Host ""
        Write-Host "ÂÆüË°åÊôÇÈñì: ${duration}Áßí" -ForegroundColor Gray
    }
    
    [void] ShowUrls() {
        Write-Host ""
        Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Green
        Write-Host "‚ïë                      „Ç∑„Çπ„ÉÜ„É†Ëµ∑ÂãïÂÆå‰∫ÜÔºÅ                                  ‚ïë" -ForegroundColor Green
        Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Green
        Write-Host ""
        Write-Host "üìå „Ç¢„ÇØ„Çª„ÇπURL:" -ForegroundColor White
        Write-Host "   „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ:  http://192.168.3.92:3050" -ForegroundColor Cyan
        Write-Host "   „Éê„ÉÉ„ÇØ„Ç®„É≥„ÉâAPI: http://192.168.3.92:8080" -ForegroundColor Cyan
        Write-Host "   API‰ªïÊßòÊõ∏:      http://192.168.3.92:8080/api/docs" -ForegroundColor Cyan
        Write-Host ""
        Write-Host "üõë ÂÅúÊ≠¢ÊñπÊ≥ï:" -ForegroundColor Yellow
        Write-Host "   ÂêÑ„Çµ„Éº„Éê„Éº„Ç¶„Ç£„É≥„Éâ„Ç¶„Åß Ctrl+C" -ForegroundColor Gray
        Write-Host "   „Åæ„Åü„ÅØ .\Stop-WebUI.ps1 „ÇíÂÆüË°å" -ForegroundColor Gray
    }
}

# ============================================================================
# „É°„Ç§„É≥Âá¶ÁêÜ
# ============================================================================

Clear-Host

# „Éê„Éä„ÉºË°®Á§∫
Write-Host ""
Write-Host "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó" -ForegroundColor Cyan
Write-Host "‚ïë         „Éï„É≠„É≥„Éà„Ç®„É≥„ÉâÔºã„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ Áµ±ÂêàËá™ÂãïË®∫Êñ≠„Éª‰øÆÂæ©„Ç∑„Çπ„ÉÜ„É†          ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïë                  Windows 11 ÁÑ°‰∫∫ÂøúÁ≠î„Éï„Ç°„Ç§„É´ÁîüÊàê„Ç∑„Çπ„ÉÜ„É†                 ‚ïë" -ForegroundColor Cyan
Write-Host "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù" -ForegroundColor Cyan
Write-Host ""

# „Ç™„Éó„Ç∑„Éß„É≥Ë°®Á§∫
Write-ColorLog "ÂÆüË°å„Ç™„Éó„Ç∑„Éß„É≥:" "INFO" "SYSTEM"
Write-Host "  Ë©≥Á¥∞„É≠„Ç∞: $(if($Verbose){'ON'}else{'OFF'})" -ForegroundColor Gray
Write-Host "  Âº∑Âà∂‰øÆÂæ©: $(if($Force){'ON'}else{'OFF'})" -ForegroundColor Gray
Write-Host "  ÊúÄÂ§ß„É™„Éà„É©„Ç§: $MaxRetries" -ForegroundColor Gray
Write-Host "  ‰∏¶ÂàóÂá¶ÁêÜ: $(if($Parallel){'ON'}else{'OFF'})" -ForegroundColor Gray
if ($SkipFrontend) { Write-Host "  ‚ö†Ô∏è „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Çí„Çπ„Ç≠„ÉÉ„Éó" -ForegroundColor Yellow }
if ($SkipBackend) { Write-Host "  ‚ö†Ô∏è „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Çí„Çπ„Ç≠„ÉÉ„Éó" -ForegroundColor Yellow }
Write-Host ""

# „Éë„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
$backendPath = Join-Path $ScriptRoot "backend"
$frontendPath = Join-Path $ScriptRoot "frontend"

if (-not $SkipBackend -and -not (Test-Path $backendPath)) {
    Write-ColorLog "„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $backendPath" "ERROR" "SYSTEM"
    exit 1
}

if (-not $SkipFrontend -and -not (Test-Path $frontendPath)) {
    Write-ColorLog "„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Éï„Ç©„É´„ÉÄ„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì: $frontendPath" "ERROR" "SYSTEM"
    exit 1
}

# Êó¢Â≠ò„Éó„É≠„Çª„Çπ„ÅÆÁ¢∫Ë™ç
Write-ColorLog "Êó¢Â≠ò„Éó„É≠„Çª„Çπ„ÇíÁ¢∫Ë™ç‰∏≠..." "INFO" "SYSTEM"

$existingBackend = Test-Path Variable:backendProcess
$existingFrontend = Test-Path Variable:frontendProcess

if ($existingBackend -or $existingFrontend) {
    if (-not $Force) {
        $response = Read-Host "Êó¢Â≠ò„ÅÆ„Çµ„Éº„Éê„Éº„ÅåÊ§úÂá∫„Åï„Çå„Åæ„Åó„Åü„ÄÇÂÜçËµ∑Âãï„Åó„Åæ„Åô„ÅãÔºü (Y/N)"
        if ($response -ne 'Y' -and $response -ne 'y') {
            Write-ColorLog "Âá¶ÁêÜ„Çí„Ç≠„É£„É≥„Çª„É´„Åó„Åæ„Åó„Åü" "INFO" "SYSTEM"
            exit 0
        }
    }
    
    # Êó¢Â≠ò„Éó„É≠„Çª„Çπ„ÇíÂÅúÊ≠¢
    Write-ColorLog "Êó¢Â≠ò„Éó„É≠„Çª„Çπ„ÇíÂÅúÊ≠¢‰∏≠..." "WARNING" "SYSTEM"
    
    Get-Process python* -ErrorAction SilentlyContinue | 
        Where-Object { $_.Path -like "*Generate-autounattendxml*" } |
        Stop-Process -Force
    
    Get-Process node* -ErrorAction SilentlyContinue | 
        Where-Object { $_.CommandLine -like "*3050*" } |
        Stop-Process -Force
    
    Start-Sleep -Seconds 2
}

# „Éû„Éç„Éº„Ç∏„É£„Éº‰ΩúÊàê
$options = @{
    Parallel = $Parallel
    MaxRetries = $MaxRetries
    Force = $Force
    Verbose = $Verbose
}

$manager = [SystemDiagnosticManager]::new($ScriptRoot, $options)

# Ë®∫Êñ≠„Éª‰øÆÂæ©ÂÆüË°å
Write-Host ""
Write-ColorLog "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" "INFO" "SYSTEM"

$diagnosticSuccess = $manager.RunDiagnostics($SkipFrontend, $SkipBackend)

# „É¨„Éù„Éº„ÉàË°®Á§∫
$manager.ShowReport()

if ($diagnosticSuccess) {
    Write-Host ""
    Write-ColorLog "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" "INFO" "SYSTEM"
    
    # „Çµ„Éº„Éê„ÉºËµ∑Âãï
    if ($manager.StartServers($SkipFrontend, $SkipBackend)) {
        # Ëµ∑ÂãïÁ¢∫Ë™ç
        Start-Sleep -Seconds 3
        
        $backendOK = $false
        $frontendOK = $false
        
        if (-not $SkipBackend) {
            try {
                $response = Invoke-WebRequest -Uri "http://192.168.3.92:8080/api/status" -UseBasicParsing -TimeoutSec 5
                if ($response.StatusCode -eq 200) {
                    $backendOK = $true
                }
            } catch {}
        }
        
        if (-not $SkipFrontend) {
            # „Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„ÅØËµ∑Âãï„Å´ÊôÇÈñì„Åå„Åã„Åã„Çã„Åü„ÇÅ„ÄÅÁ¢∫Ë™ç„ÇíÈÅÖÂª∂
            $frontendOK = $true  # ‰ªÆ„Å´OK„Å®„Åô„Çã
        }
        
        if ($backendOK -or $frontendOK) {
            $manager.ShowUrls()
            
            # „Éñ„É©„Ç¶„Ç∂Ëµ∑Âãï
            Start-Sleep -Seconds 2
            if (-not $SkipFrontend) {
                Start-Process "http://192.168.3.92:3050"
            } elseif (-not $SkipBackend) {
                Start-Process "http://192.168.3.92:8080/api/docs"
            }
        }
    } else {
        Write-ColorLog "„Çµ„Éº„Éê„ÉºËµ∑Âãï„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" "ERROR" "SYSTEM"
    }
} else {
    Write-Host ""
    Write-ColorLog "Ë®∫Êñ≠„Éª‰øÆÂæ©„Å´Â§±Êïó„Åó„Åæ„Åó„Åü" "ERROR" "SYSTEM"
    Write-Host ""
    Write-ColorLog "ÊâãÂãï„Åß„ÅÆÂØæÂá¶„ÅåÂøÖË¶Å„Åß„Åô:" "WARNING" "SYSTEM"
    
    if (-not $SkipBackend -and $manager.Backend.Errors.Count -gt 0) {
        Write-Host ""
        Write-Host "„Äê„Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„Äë" -ForegroundColor Yellow
        Write-Host "  1. Python 3.9‰ª•‰∏ä„Çí„Ç§„É≥„Çπ„Éà„Éº„É´" -ForegroundColor Gray
        Write-Host "  2. backend\venv„ÇíÂâäÈô§„Åó„Å¶ÂÜçÂÆüË°å" -ForegroundColor Gray
    }
    
    if (-not $SkipFrontend -and $manager.Frontend.Errors.Count -gt 0) {
        Write-Host ""
        Write-Host "„Äê„Éï„É≠„É≥„Éà„Ç®„É≥„Éâ„Äë" -ForegroundColor Yellow
        Write-Host "  1. Node.js 18‰ª•‰∏ä„Çí„Ç§„É≥„Çπ„Éà„Éº„É´" -ForegroundColor Gray
        Write-Host "  2. frontend\node_modules„ÇíÂâäÈô§„Åó„Å¶ÂÜçÂÆüË°å" -ForegroundColor Gray
    }
    
    Write-Host ""
    Read-Host "Enter„Ç≠„Éº„ÅßÁµÇ‰∫Ü"
}

Write-Host ""